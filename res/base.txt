#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>

typedef struct
m_stack
{
    int    count;
    size_t size;
    void*  content;
    int    capacity;
}
m_stack;
#define m_stack_tos(stack) (stack.content + (stack.size * (stack.count - 1)))

m_stack
_m_stack_init(size_t size)
{
    m_stack m;

    m.count    = 0;
    m.size     = size;
    m.capacity = 2;
    m.content  = malloc(m.capacity * m.size);

    return m;
}

#define m_stack_init(t) (_m_stack_init(sizeof(t)))

void m_stack_push(m_stack* m, void* item)
{
    if (m->count == m->capacity) {
        m->capacity = m->capacity * 3 / 2;
        m->content  = realloc(m->content, m->capacity * m->size);
    }
    memcpy(m->content + m->count, item, m->size);
    m->count++;
}

void* m_stack_pop(m_stack* m)
{
    if (m->count > 0) {
        void* item = malloc(m->size);
        memcpy(item, m->content + (m->count - 1), m->size);
        return item;
    } else return NULL;
}

char* re_string;
char* re_strptr;
m_stack offset_stack;
m_stack bool_stack;
m_stack counter_stack;

void re_conv_init() {
    re_string     = NULL;
    re_strptr     = NULL;
    offset_stack  = m_stack_init(int);
    bool_stack    = m_stack_init(bool);
    counter_stack = m_stack_init(int);
}

#define save_pos() do {\
    m_stack_push(&offset_stack, (int[]){re_strptr - re_string});\
} while (0);
#define prev_pos() *(re_strptr = re_string + *((int*)m_stack_pop(&offset_stack)))
#define scan() (*re_strptr == '\0' ? -1 : *(++re_strptr))

#define save_bool(ques) m_stack_push(&bool_stack, (bool[]){(ques)})
#define load_bool() *((bool*)m_stack_pop(&bool_stack))

#define new_counter() m_stack_push(&counter_stack, (int[]){0})
#define count() *((int*)m_stack_pop(&counter_stack))
#define inc_counter() ++(*(int*)m_stack_tos(counter_stack))

#define set_string(str) do {\
    re_string = (str);\
    re_strptr = re_string - 1;\
} while (0);

int main(int argc, char** argv)
{
    if (argc < 2) {
        fprintf(stderr, "give me arg..\n");
        return EXIT_FAILURE;
    }

    char ch;
    re_conv_init();
    set_string(argv[1]);
    ch = scan();

    /* input */
    
    printf(load_bool() ? "true" : "false");
    return EXIT_SUCCESS;
}